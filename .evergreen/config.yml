# Welcome. Evergreen configuration can be time consuming to modify and test.
# So each script has a header comment describing how to run it locally.
#
# Some environment variables are hidden in the evergreen project config.
# View this in Evergreen => Projects => libmongocrypt.
#
functions:
  "fetch source":
    - command: git.get_project
      params: {directory: libmongocrypt}
    - command: shell.exec
      params:
        script: |-
          set -o errexit
          chmod u+x libmongocrypt/.evergreen/*.sh
          ./libmongocrypt/.evergreen/print-env-info.sh

  "tar and upload libmongocrypt libraries":
    - command: archive.targz_pack
      params:
        target: libmongocrypt.tar.gz
        source_dir: install/libmongocrypt
        include: [./**]
    - command: s3.put
      params:
        aws_key: '${aws_key}'
        aws_secret: '${aws_secret}'
        remote_file: '${project}/${build_variant}/${branch_name}/${libmongocrypt_s3_suffix}/libmongocrypt.tar.gz'
        bucket: mciuploads
        permissions: public-read
        local_file: 'libmongocrypt.tar.gz'
        content_type: '${content_type|application/x-gzip}'
    - command: s3.put
      params:
        aws_key: '${aws_key}'
        aws_secret: '${aws_secret}'
        remote_file: '${project}/${build_variant}/${branch_name}/${libmongocrypt_s3_suffix_copy}/libmongocrypt.tar.gz'
        bucket: mciuploads
        permissions: public-read
        local_file: 'libmongocrypt.tar.gz'
        content_type: '${content_type|application/x-gzip}'

  "build and test":
    - command: "shell.exec"
      params:
        script: |-
          ${compile_env|} ./libmongocrypt/.evergreen/compile.sh
          ${test_env|} ./libmongocrypt/.evergreen/test.sh

  "run clang-tidy":
    - command: "shell.exec"
      params:
        script: |-
          ${compile_env|} CONFIGURE_ONLY=ON ./libmongocrypt/.evergreen/compile.sh
          ./libmongocrypt/.evergreen/clang-tidy.sh

  "build and test java":
    - command: "shell.exec"
      params:
        script: |-
          ${compile_env|} ./libmongocrypt/.evergreen/compile.sh
          cd ./libmongocrypt/bindings/java/mongocrypt && ${test_env|} ./.evergreen/test.sh

  "build and test python":
    - command: "shell.exec"
      params:
        script: |-
          ${compile_env|} ./libmongocrypt/.evergreen/compile.sh
          cd ./libmongocrypt/bindings/python && ${test_env|} ./.evergreen/test.sh

  "publish snapshot":
    - command: shell.exec
      params:
        silent: true
        script: |-
          cd ./libmongocrypt/bindings/java/mongocrypt && PROJECT_DIRECTORY=${project_directory} NEXUS_USERNAME=${nexus_username} NEXUS_PASSWORD=${nexus_password} SIGNING_PASSWORD=${signing_password} SIGNING_KEY_ID=${signing_keyId} RING_FILE_GPG_BASE64=${ring_file_gpg_base64} ./.evergreen/publish.sh

  "download tarball":
    - command: s3.get
      params:
        aws_key: '${aws_key}'
        aws_secret: '${aws_secret}'
        remote_file: '${project}/${variant_name}/${branch_name}/${libmongocrypt_s3_suffix}/libmongocrypt.tar.gz'
        bucket: mciuploads
        extract_to: all/${variant_name}

"build csharp and test":
    - command: "shell.exec"
      params:
        script: |-
          eval "${inject_env_from_evergreen}"
          ${compile_env|} ./libmongocrypt/.evergreen/compile.sh
          ${test_env|} ./libmongocrypt/.evergreen/test.sh
          ${compile_env|} ./libmongocrypt/.evergreen/compile_cs.sh

tasks:
- name: build-and-test-and-upload
  commands:
  - func: "fetch source"
  - func: "build and test"
  - func: "tar and upload libmongocrypt libraries"

- name: clang-tidy
  commands:
  - func: "fetch source"
  - func: "run clang-tidy"

- name: build-and-test-shared-bson
  commands:
  - func: "fetch source"
  - func: "build and test"
    vars:
      compile_env: LIBMONGOCRYPT_EXTRA_CMAKE_FLAGS="-DENABLE_SHARED_BSON=ON"

- name: build-and-test-asan
  commands:
  - func: "fetch source"
  - func: "build and test"
    vars:
      compile_env: LIBMONGOCRYPT_EXTRA_CFLAGS="-fsanitize=address -pthread"
      test_env: ASAN_OPTIONS="detect_leaks=1" LSAN_OPTIONS="suppressions=.lsan-suppressions"

- name: build-and-test-asan-mac
  commands:
  - func: "fetch source"
  - func: "build and test"
    vars:
      compile_env: LIBMONGOCRYPT_EXTRA_CFLAGS="-fsanitize=address"
      test_env: LSAN_OPTIONS="suppressions=.lsan-suppressions"

- name: build-and-test-asan-s390x
  commands:
  - func: "fetch source"
  - func: "build and test"
    vars:
      compile_env: LIBMONGOCRYPT_EXTRA_CFLAGS="-fsanitize=address"
      test_env: LSAN_OPTIONS="suppressions=.lsan-suppressions"

- name: build-and-test-valgrind
  commands:
  - func: "fetch source"
  - func: "build and test"
    vars:
      test_env: VALGRIND="valgrind --leak-check=full --error-exitcode=1"

- name: build-and-test-java
  commands:
    - func: "fetch source"
    - func: "build and test java"
    
- name: build-and-test-python
  commands:
    - func: "fetch source"
    - func: "build and test python"

- name: build-csharp-and-test
  commands:
  - func: "fetch source"
  - func: "build csharp and test"
- name: publish-snapshot
  depends_on:
    - variant: rhel-62-64-bit
      name: build-and-test-java
    - variant: rhel-67-s390x
      name: build-and-test-and-upload
    - variant: ubuntu1604-arm64
      name: build-and-test-java
    - variant: macos
      name: build-and-test-java
    - variant: windows-test
      name: build-and-test-and-upload # Todo update once java build passing on windows
  commands:
    - func: "fetch source"
    - func: "publish snapshot"

- name: upload-all
  depends_on:
    - variant: ubuntu1604
      name: build-and-test-and-upload
    - variant: rhel76
      name: build-and-test-and-upload
    - variant: macos
      name: build-and-test-and-upload
    - variant: rhel72-zseries-test
      name: build-and-test-and-upload
    - variant: windows-test
      name: build-and-test-and-upload
    - variant: linux-64-amazon-ami
      name: build-and-test-and-upload
    - variant: amazon2
      name: build-and-test-and-upload
    - variant: debian92
      name: build-and-test-and-upload
    - variant: rhel-62-64-bit
      name: build-and-test-and-upload
    - variant: rhel-67-s390x
      name: build-and-test-and-upload
    - variant: rhel-70-64-bit
      name: build-and-test-and-upload
    - variant: rhel-71-ppc64el
      name: build-and-test-and-upload
    - variant: suse12-64
      name: build-and-test-and-upload
    - variant: suse15-64
      name: build-and-test-and-upload
    - variant: suse12-s390x  
      name: build-and-test-and-upload
    - variant: ubuntu1604-arm64
      name: build-and-test-and-upload
    - variant: ubuntu1604-s390x
      name: build-and-test-and-upload
    - variant: ubuntu1804-64
      name: build-and-test-and-upload
    - variant: ubuntu1804-arm64
      name: build-and-test-and-upload
    # - variant: ubuntu1804-ppc64el
    #   name: build-and-test-and-upload
    # - variant: ubuntu1804-s390x
    #   name: build-and-test-and-upload
  commands:
    - command: shell.exec
      params:
        script: mkdir all
    - func: "download tarball"
      vars: { variant_name: ubuntu1604 }
    - func: "download tarball"
      vars: { variant_name: rhel76 }
    - func: "download tarball"
      vars: { variant_name: "macos" }
    - func: "download tarball"
      vars: { variant_name: "rhel72-zseries-test" }
    - func: "download tarball"
      vars: { variant_name: "windows-test" }
    - func: "download tarball"
      vars: { variant_name: "linux-64-amazon-ami" }
    - func: "download tarball"
      vars: { variant_name: "amazon2" }
    - func: "download tarball"
      vars: { variant_name: "debian92" }
    - func: "download tarball"
      vars: { variant_name: "rhel-62-64-bit" }
    - func: "download tarball"
      vars: { variant_name: "rhel-67-s390x" }
    - func: "download tarball"
      vars: { variant_name: "rhel-70-64-bit" }
    - func: "download tarball"
      vars: { variant_name: "rhel-71-ppc64el" }
    - func: "download tarball"
      vars: { variant_name: "suse12-64" }
    - func: "download tarball"
      vars: { variant_name: "suse15-64" }
    - func: "download tarball"
      vars: { variant_name: "suse12-s390x" }
    - func: "download tarball"
      vars: { variant_name: "ubuntu1604-arm64" }
    - func: "download tarball"
      vars: { variant_name: "ubuntu1604-s390x" }
    - func: "download tarball"
      vars: { variant_name: "ubuntu1804-64" }
    - func: "download tarball"
      vars: { variant_name: "ubuntu1804-arm64" }
    # TODO: ubuntu1804 is not getting scheduled, so omit.
    # - func: "download tarball"
    #   vars: { variant_name: "ubuntu1804-ppc64el" }
    # - func: "download tarball"
    #   vars: { variant_name: "ubuntu1804-s390x" }
    - command: archive.targz_pack
      params:
        target: libmongocrypt-all.tar.gz
        source_dir: all
        include: [./**]
    - command: s3.put
      params:
        aws_key: '${aws_key}'
        aws_secret: '${aws_secret}'
        remote_file: '${project}/all/${branch_name}/${libmongocrypt_s3_suffix}/libmongocrypt-all.tar.gz'
        bucket: mciuploads
        permissions: public-read
        local_file: 'libmongocrypt-all.tar.gz'
        content_type: '${content_type|application/x-gzip}'

pre:
  # Update the evergreen expansion to dynamically set the ${libmongocrypt_s3_suffix} and ${libmongocrypt_s3_suffix_copy} expansions.
  - command: "shell.exec"
    params:
      # Uploads are prefixed with ${project}/${build_variant}/${branch_name|all}
      script: |-
        if [ "${is_patch}" = "true" ]; then
          # patch build.
          REMOTE_SUFFIX="${revision}/${version_id}"
          REMOTE_SUFFIX_COPY="latest/${version_id}"
        elif [ -z "${tag_name}" ]; then
          # waterfall build, no tag.
          REMOTE_SUFFIX="${revision}"
          REMOTE_SUFFIX_COPY="latest"
        else
          # waterfall build, with tag.
          REMOTE_SUFFIX="${revision}"
          REMOTE_SUFFIX_COPY="${tag_name}"
        fi
        unset tag_name
        PROJECT_DIRECTORY="$(pwd)"
        echo "libmongocrypt_s3_suffix: $REMOTE_SUFFIX"
        echo "libmongocrypt_s3_suffix_copy: $REMOTE_SUFFIX_COPY"
        echo "project_directory: $PROJECT_DIRECTORY"

        cat <<EOT > expansion.yml
        libmongocrypt_s3_suffix: "$REMOTE_SUFFIX"
        libmongocrypt_s3_suffix_copy: "$REMOTE_SUFFIX_COPY"
        project_directory: "$PROJECT_DIRECTORY"
        EOT
  - command: expansions.update
    params:
      file: expansion.yml

# NOTE: When adding a new variant, update the "upload-all" task.
buildvariants:
- name: ubuntu1604
  display_name: "Ubuntu 16.04 64-bit"
  run_on: ubuntu1604-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan
  - build-and-test-valgrind
  - build-and-test-java
- name: rhel76
  display_name: "RHEL 7.6"
  run_on: rhel76-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-java
  - build-csharp-and-test
- name: macos
  display_name: "macOS 10.14"
  run_on: macos-1014
  tasks:
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan-mac
  - build-and-test-java
- name: rhel72-zseries-test
  display_name: "RHEL 7.2 on zSeries"
  run_on: rhel72-zseries-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-java
- name: windows-test
  display_name: "Windows 2016"
  run_on: windows-64-vs2017-test
  tasks:
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-csharp-and-test
- name: linux-64-amazon-ami
  display_name: "Amazon Linux"
  run_on: amazon1-2018-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-java
- name: amazon2
  display_name: "Amazon Linux 2"
  run_on: amazon2-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-java
- name: debian92
  display_name: "Debian 9.2"
  run_on: debian92-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan
  - build-and-test-java
- name: rhel-62-64-bit
  display_name: "RHEL 6.2 64-bit"
  run_on: rhel62-small
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-java
  - build-and-test-python
- name: rhel-67-s390x
  display_name: "RHEL 6.7 s390x"
  run_on: rhel67-zseries-test
  tasks:
  - build-and-test-and-upload
  - build-and-test-shared-bson
- name: rhel-70-64-bit
  display_name: "RHEL 7.0 64-bit"
  run_on: rhel70-small
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-java
- name: rhel-71-ppc64el
  display_name: "RHEL 7.1 ppc64el"
  run_on: rhel71-power8-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-java
- name: suse12-64
  display_name: "SLES 12 64-bit"
  run_on: suse12-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan
  - build-and-test-java
- name: suse15-64
  display_name: "SLES 15 64-bit"
  run_on: suse15-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan
  - build-and-test-java
- name: suse12-s390x  
  display_name: "SLES 12 s390x"
  run_on: suse12-zseries-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-java
- name: ubuntu1604-arm64
  display_name: "Ubuntu 16.04 arm64"
  run_on: ubuntu1604-arm64-large
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan
  - build-and-test-java
- name: ubuntu1604-s390x
  display_name: "Ubuntu 16.04 s390x"
  run_on: ubuntu1604-zseries-small
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-java
- name: ubuntu1804-64
  display_name: "Ubuntu 18.04 64-bit"
  run_on: ubuntu1804-test
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan
  - build-and-test-java
- name: ubuntu1804-arm64
  display_name: "Ubuntu 18.04 arm64"
  run_on: ubuntu1804-arm64-build
  tasks:
  - clang-tidy
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan
  - build-and-test-java
- name: ubuntu1804-ppc64el
  display_name: "Ubuntu 18.04 ppc64el"
  run_on: ubuntu1804-power8-test
  tasks:
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan
  - build-and-test-java
- name: ubuntu1804-s390x
  display_name: "Ubuntu 18.04 s390x"
  run_on: ubuntu1804-zseries-test
  tasks:
  - build-and-test-and-upload
  - build-and-test-shared-bson
  - build-and-test-asan-s390x
  - build-and-test-java
- name: publish-snapshot
  display_name: "Publish"
  run_on: ubuntu1804-test
  tasks:
    - name: "publish-snapshot"
    - name: "upload-all"
